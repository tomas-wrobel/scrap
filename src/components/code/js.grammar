@top Program {
    Statement*
}

@skip {
    space | Comment
}

Block {
    "{" Statement* "}"
}

MethodCall {
    This "." Identifier "(" ArgumentList ")"
}

FunctionArgument {
    kw<"function"> "()" Block
}

Property {
    This "." Identifier
}

Expression {
    Number | String | MethodCall | Property | FunctionArgument | Boolean | "(" Expression ")" | BinaryExpression | This | Identifier
}

Statement {
    ThrowStatement {kw<"throw"> Expression ";"} |   
    TryStatement {kw<"try"> Block kw<"catch"> "(" Identifier ")" Block} |
    ReturnStatement {kw<"return"> Expression ";"} |
    VariableDeclaration {kw<"var"> Identifier ";"} |
    IfStatement {If ElseIf* Else?} | 
	ForOfStatement { kw<"for"> "(" kw<"const"> Identifier "of" Expression ")"  Block } |
    ForStatement {kw<"for"> "(" kw<"let"> Identifier "=" Zero ";" Identifier "<" Expression ";" Identifier "++" ")" Block} |
    WhileStatement {kw<"while"> "(" Expression ")" Block} |
    Assignment {Identifier "=" Expression ";"} |
    kw<"break"> ";" |
    kw<"continue"> ";" |
    Expression ";"
}

ArgumentList { 
    "" | Expression ("," Expression)*
}

BinaryExpression {
    Expression !times "*" Expression |
    Expression !plus "+" Expression |
    Expression !minus "-" Expression |
    Expression !divide "/" Expression |
    Expression !rel ("==" | "!=" | "<" | "<=" | ">" | ">=") Expression |
    Expression !logic ("&&" | "||") Expression |
    Expression !not "!" Expression
}

If {
    kw<"if"> "(" Expression ")" Block 
}

ElseIf {
    kw<"else"> If
}

Else {
    kw<"else"> Block
}

@precedence {
    rel @left,
    logic @left,
    times @left,
    divide @left,
    plus @left,
    minus @left,
    not @right
}

Number {
    number
}

Boolean {
    kw<"true"> | kw<"false">
}

String {
    string
}

Zero {
    "0"
}

This {
    kw<"this">
}

kw<term> {
    @specialize[@name="keyword"]<Identifier, term>
}

@tokens {
    space {
        @whitespace+
    }

    Comment { 
        "//" ![\n]*
    }

    number {
        "-"? $[0-9]+ ("." $[0-9]+)?
    }

    string {
        '"' ![\\\n']+  '"'
    }

    Identifier {
        $[a-zA-Z_]$[a-zA-Z0-9_]*
    }

    @precedence {
        Comment,
        "/"
    }
}