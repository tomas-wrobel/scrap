// Here you can find definitions the statically defined blocks
// If you look for other blocks, check out the blockly/blocks folder
// which contains the dynamically loaded blocks
{
	// Variables getters / setters
	"setVariable": {
		"message0": "%{BKY_VARIABLES_SET}",
		"args0": [
			{
				"type": "input_dummy",
				"name": "DUMMY"
			},
			{
				"type": "input_value",
				"name": "VALUE"
			}
		],
		"previousStatement": null,
		"nextStatement": null,
		"style": "variable_blocks",
		"extensions": [
			"var_menu",
			"setVar"
		],
		"inputsInline": true
	},
	"getVariable": {
		"message0": "%1",
		"args0": [
			{
				"type": "field_label_serializable",
				"name": "VAR"
			}
		],
		"output": null,
		"style": "variable_blocks",
		"extensions": [
			"getVar"
		]
	},
	"changeVariable": {
		"message0": "change %1 by %2",
		"args0": [
			{
				"type": "input_dummy",
				"name": "DUMMY"
			},
			{
				"type": "input_value",
				"name": "VALUE",
				"check": "Number"
			}
		],
		"previousStatement": null,
		"nextStatement": null,
		"style": "variable_blocks",
		"extensions": [
			"var_menu"
		],
		"inputsInline": true
	},
	// Variables showing / hiding
	"showVariable": {
		"message0": "show variable %1",
		"args0": [
			{
				"type": "input_dummy",
				"name": "DUMMY"
			}
		],
		"previousStatement": null,
		"nextStatement": null,
		"style": "variable_blocks",
		"extensions": [
			"var_menu"
		],
		"inputsInline": true
	},
	"hideVariable": {
		"message0": "hide variable %1",
		"args0": [
			{
				"type": "input_dummy",
				"name": "DUMMY"
			}
		],
		"previousStatement": null,
		"nextStatement": null,
		"style": "variable_blocks",
		"extensions": [
			"var_menu"
		],
		"inputsInline": true
	},
	// Blocks for function's mutator
	// Some of them are defined in blockly/utils/types.ts
	"function_header": {
		"message0": "function's parameters",
		"style": "procedure_blocks",
		"nextStatement": null
	},
	// Scratch 3 does not distinguish between text and number parameters
	"text_or_number_param": {
		"inputsInline": true,
		"message0": "Scratch parameter %1",
		"args0": [
			{
				"type": "field_input",
				"name": "NAME"
			}
		],
		"style": "procedure_blocks",
		"nextStatement": null,
		"previousStatement": null
	},
	"parameter": {
		"message0": "%1",
		"args0": [
			{
				"type": "field_label_serializable",
				"name": "VAR"
			}
		],
		"style": "variable_blocks",
		"output": null
	},
	// Call function block
	"call": {
		"message0": "%1",
		"args0": [
			{
				"type": "field_label",
				"name": "NAME",
				"text": "foo"
			}
		],
		"style": "procedure_blocks",
		"previousStatement": null,
		"nextStatement": null,
		"mutator": "mutator_call",
		"inputsInline": true
	},
	// Mutator blocks for if / else / else uf
	"controls_if_if": {
		"message0": "%{BKY_CONTROLS_IF_IF_TITLE_IF}",
		"nextStatement": null,
		"enableContextMenu": false,
		"style": "Controls",
		"tooltip": "%{BKY_CONTROLS_IF_IF_TOOLTIP}"
	},
	"controls_if_elseif": {
		"message0": "%{BKY_CONTROLS_IF_ELSEIF_TITLE_ELSEIF}",
		"previousStatement": null,
		"nextStatement": null,
		"enableContextMenu": false,
		"style": "Controls",
		"tooltip": "%{BKY_CONTROLS_IF_ELSEIF_TOOLTIP}"
	},
	"controls_if_else": {
		"message0": "%{BKY_CONTROLS_IF_ELSE_TITLE_ELSE}",
		"previousStatement": null,
		"enableContextMenu": false,
		"style": "Controls",
		"tooltip": "%{BKY_CONTROLS_IF_ELSE_TOOLTIP}"
	},
	// Mutator blocks for array
	"array_mutator_item_single": {
		"message0": "single item",
		"style": "Iterables",
		"nextStatement": null,
		"previousStatement": null
	},
	"array_mutator_item_iterable": {
		"message0": "spread iterable",
		"style": "Iterables",
		"nextStatement": null,
		"previousStatement": null
	},
	"array_mutator_items": {
		"message0": "items",
		"style": "Iterables",
		"nextStatement": null
	},
	// Dropdowns
	"key": {
		"message0": "%1",
		"args0": [
			{
				"type": "field_dropdown",
				"name": "KEY",
				"options": [
					[
						"any",
						"any"
					],
					[
						"Enter",
						"Enter"
					],
					[
						"Escape",
						"Escape"
					],
					[
						"Space",
						"Space"
					],
					[
						"ArrowUp",
						"ArrowUp"
					],
					[
						"ArrowDown",
						"ArrowDown"
					],
					[
						"ArrowLeft",
						"ArrowLeft"
					],
					[
						"ArrowRight",
						"ArrowRight"
					],
					[
						"Shift",
						"Shift"
					],
					[
						"Ctrl",
						"Ctrl"
					],
					[
						"Alt",
						"Alt"
					],
					[
						"Backspace",
						"Backspace"
					],
					[
						"Tab",
						"Tab"
					],
					[
						"Delete",
						"Delete"
					],
					[
						"CapsLock",
						"CapsLock"
					],
					[
						"F1",
						"F1"
					],
					[
						"F2",
						"F2"
					],
					[
						"F3",
						"F3"
					],
					[
						"F4",
						"F4"
					],
					[
						"F5",
						"F5"
					],
					[
						"F6",
						"F6"
					],
					[
						"F7",
						"F7"
					],
					[
						"F8",
						"F8"
					],
					[
						"F9",
						"F9"
					],
					[
						"F10",
						"F10"
					],
					[
						"F11",
						"F11"
					],
					[
						"F12",
						"F12"
					],
					[
						"A",
						"A"
					],
					[
						"B",
						"B"
					],
					[
						"C",
						"C"
					],
					[
						"D",
						"D"
					],
					[
						"E",
						"E"
					],
					[
						"F",
						"F"
					],
					[
						"G",
						"G"
					],
					[
						"H",
						"H"
					],
					[
						"I",
						"I"
					],
					[
						"J",
						"J"
					],
					[
						"K",
						"K"
					],
					[
						"L",
						"L"
					],
					[
						"M",
						"M"
					],
					[
						"N",
						"N"
					],
					[
						"O",
						"O"
					],
					[
						"P",
						"P"
					],
					[
						"Q",
						"Q"
					],
					[
						"R",
						"R"
					],
					[
						"S",
						"S"
					],
					[
						"T",
						"T"
					],
					[
						"U",
						"U"
					],
					[
						"V",
						"V"
					],
					[
						"W",
						"W"
					],
					[
						"X",
						"X"
					],
					[
						"Y",
						"Y"
					],
					[
						"Z",
						"Z"
					],
					[
						"a",
						"a"
					],
					[
						"b",
						"b"
					],
					[
						"c",
						"c"
					],
					[
						"d",
						"d"
					],
					[
						"e",
						"e"
					],
					[
						"f",
						"f"
					],
					[
						"g",
						"g"
					],
					[
						"h",
						"h"
					],
					[
						"i",
						"i"
					],
					[
						"j",
						"j"
					],
					[
						"k",
						"k"
					],
					[
						"l",
						"l"
					],
					[
						"m",
						"m"
					],
					[
						"n",
						"n"
					],
					[
						"o",
						"o"
					],
					[
						"p",
						"p"
					],
					[
						"q",
						"q"
					],
					[
						"r",
						"r"
					],
					[
						"s",
						"s"
					],
					[
						"t",
						"t"
					],
					[
						"u",
						"u"
					],
					[
						"v",
						"v"
					],
					[
						"w",
						"w"
					],
					[
						"x",
						"x"
					],
					[
						"y",
						"y"
					],
					[
						"z",
						"z"
					]
				]
			}
		],
		"output": "String",
		"style": "variable_blocks",
		"extensions": [
			"parent_style"
		]
	},
	"costume_menu": {
		"message0": "%1",
		"args0": [
			{
				"type": "input_dummy",
				"name": "DUMMY"
			}
		],
		"output": "String",
		"style": "Looks",
		"extensions": [
			// This will inject a field with 
			// the costumes into the dummy input
			"costume_menu"
		]
	},
	"backdrop_menu": {
		"message0": "%1",
		"args0": [
			{
				"type": "input_dummy",
				"name": "DUMMY"
			}
		],
		"output": "String",
		"style": "variable_blocks",
		"extensions": [
			// This will inject a field with 
			// the backdrops into the dummy input
			"backdrop_menu",
			"parent_style"
		]
	},
	"sound": {
		"message0": "%1",
		"args0": [
			{
				"type": "input_dummy",
				"name": "DUMMY"
			}
		],
		"output": "String",
		"style": "Sounds",
		"extensions": [
			"sound_menu"
		]
	},
	// Basic values (always shadow blocks)
	"color": {
		"message0": "%1",
		"args0": [
			{
				"type": "field_colour_hsv_sliders",
				"name": "COLOR",
				"colour": "#ff0000"
			}
		],
		"output": "Color",
		"style": "Pen"
	},
	"math_number": {
		"message0": "%1",
		"args0": [
			{
				"type": "field_number",
				"name": "NUM"
			}
		],
		"output": "Number",
		"style": "Operators"
	},
	"motion_angle": {
		"message0": "%1",
		"args0": [
			{
				"type": "field_angle",
				"name": "VALUE"
			}
		],
		"output": "Number",
		"style": "Motion"
	},
	"text_or_number": {
		"inputsInline": true,
		"message0": "%1",
		"args0": [
			{
				"type": "field_input",
				"name": "VALUE",
				"text": ""
			}
		],
		"output": [
			"String",
			"Number"
		],
		"style": "Operators"
	},
	// Motion
	"move": {
		"inputsInline": true,
		"message0": "move %1 steps",
		"args0": [
			{
				"type": "input_value",
				"name": "STEPS",
				"check": "Number"
			}
		],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Motion"
	},
	"turnLeft": {
		"inputsInline": true,
		"message0": "turn left %1 degress",
		"args0": [
			{
				"type": "input_value",
				"name": "DEGREES",
				"check": "Number"
			}
		],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Motion"
	},
	"turnRight": {
		"inputsInline": true,
		"message0": "turn right %1 degress",
		"args0": [
			{
				"type": "input_value",
				"name": "DEGREES",
				"check": "Number"
			}
		],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Motion"
	},
	"pointInDirection": {
		"inputsInline": true,
		"message0": "point in direction %1",
		"args0": [
			{
				"type": "input_value",
				"name": "DIRECTION",
				"check": "Number"
			}
		],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Motion"
	},
	"pointTowards": {
		"inputsInline": true,
		"message0": "point towards %1",
		"args0": [
			{
				"type": "input_value",
				"name": "SPRITE",
				"check": "Sprite"
			}
		],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Motion"
	},
	"pointTo": {
		"inputsInline": true,
		"message0": "point to x: %1 y: %2",
		"args0": [
			{
				"type": "input_value",
				"name": "X",
				"check": "Number"
			},
			{
				"type": "input_value",
				"name": "Y",
				"check": "Number"
			}
		],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Motion"
	},
	"goTo": {
		"inputsInline": true,
		"message0": "go to x: %1 y: %2",
		"args0": [
			{
				"type": "input_value",
				"name": "X",
				"check": "Number"
			},
			{
				"type": "input_value",
				"name": "Y",
				"check": "Number"
			}
		],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Motion"
	},
	"goTowards": {
		"inputsInline": true,
		"message0": "go towards %1",
		"args0": [
			{
				"type": "input_value",
				"name": "SPRITE",
				"check": "Sprite"
			}
		],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Motion"
	},
	"glide": {
		"inputsInline": true,
		"message0": "glide %1 secs to x: %2 y: %3",
		"args0": [
			{
				"type": "input_value",
				"name": "SECS",
				"check": "Number"
			},
			{
				"type": "input_value",
				"name": "X",
				"check": "Number"
			},
			{
				"type": "input_value",
				"name": "Y",
				"check": "Number"
			}
		],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Motion"
	},
	"changeX": {
		"inputsInline": true,
		"message0": "change x by %1",
		"args0": [
			{
				"type": "input_value",
				"name": "X",
				"check": "Number"
			}
		],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Motion"
	},
	"setX": {
		"inputsInline": true,
		"message0": "set x to %1",
		"args0": [
			{
				"type": "input_value",
				"name": "X",
				"check": "Number"
			}
		],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Motion"
	},
	"changeY": {
		"inputsInline": true,
		"message0": "change y by %1",
		"args0": [
			{
				"type": "input_value",
				"name": "Y",
				"check": "Number"
			}
		],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Motion"
	},
	"setY": {
		"inputsInline": true,
		"message0": "set y to %1",
		"args0": [
			{
				"type": "input_value",
				"name": "Y",
				"check": "Number"
			}
		],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Motion"
	},
	"x": {
		"inputsInline": true,
		"message0": "x position",
		"output": "Number",
		"style": "Motion"
	},
	"y": {
		"inputsInline": true,
		"message0": "y position",
		"output": "Number",
		"style": "Motion"
	},
	"direction": {
		"inputsInline": true,
		"message0": "direction",
		"output": "Number",
		"style": "Motion"
	},
	"rotationStyle": {
		"inputsInline": true,
		"message0": "%1",
		"args0": [
			{
				"type": "field_dropdown",
				"name": "STYLE",
				"options": [
					[
						"all around",
						"all around"
					],
					[
						"left-right",
						"left-right"
					],
					[
						"don't rotate",
						"don't rotate"
					]
				]
			}
		],
		"output": "String",
		"style": "Motion"
	},
	"setRotationStyle": {
		"inputsInline": true,
		"message0": "set rotation style %1",
		"args0": [
			{
				"type": "input_value",
				"name": "STYLE",
				"check": [
					"String",
					"Number"
				]
			}
		],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Motion"
	},
	"ifOnEdgeBounce": {
		"message0": "if on edge, bounce",
		"nextStatement": null,
		"previousStatement": null,
		"args0": [],
		"style": "Motion"
	},
	// Looks
	"sayWait": {
		"inputsInline": true,
		"message0": "say %1 for %2 seconds",
		"args0": [
			{
				"type": "input_value",
				"name": "MESSAGE"
			},
			{
				"type": "input_value",
				"name": "SECS",
				"check": "Number"
			}
		],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Looks"
	},
	"say": {
		"inputsInline": true,
		"message0": "say %1",
		"args0": [
			{
				"type": "input_value",
				"name": "MESSAGE"
			}
		],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Looks"
	},
	"thinkWait": {
		"inputsInline": true,
		"message0": "think %1 for %2 seconds",
		"args0": [
			{
				"type": "input_value",
				"name": "MESSAGE"
			},
			{
				"type": "input_value",
				"name": "SECS",
				"check": "Number"
			}
		],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Looks"
	},
	"think": {
		"inputsInline": true,
		"message0": "think %1",
		"args0": [
			{
				"type": "input_value",
				"name": "MESSAGE"
			}
		],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Looks"
	},
	"changeEffect": {
		"inputsInline": true,
		"message0": "change %1 effect by %2 %",
		"args0": [
			{
				"type": "input_value",
				"name": "EFFECT",
				"check": "String"
			},
			{
				"type": "input_value",
				"name": "CHANGE",
				"check": "Number"
			}
		],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Looks"
	},
	"setEffect": {
		"inputsInline": true,
		"message0": "set %1 effect to %2 %",
		"args0": [
			{
				"type": "input_value",
				"name": "EFFECT",
				"check": "String"
			},
			{
				"type": "input_value",
				"name": "CHANGE",
				"check": "Number"
			}
		],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Looks"
	},
	"effect": {
		"message0": "%1",
		"args0": [
			{
				"type": "field_dropdown",
				"name": "EFFECT",
				"options": [
					[
						"color",
						"color"
					],
					[
						"ghost",
						"ghost"
					],
					[
						"grayscale",
						"grayscale"
					],
					[
						"brightness",
						"brightness"
					]
				]
			}
		],
		"output": "String",
		"style": "Looks"
	},
	"switchCostumeTo": {
		"inputsInline": true,
		"message0": "switch costume to %1",
		"args0": [
			{
				"type": "input_value",
				"name": "COSTUME",
				"check": [
					"String",
					"Number"
				]
			}
		],
		"previousStatement": null,
		"nextStatement": null,
		"style": "Looks"
	},
	"nextCostume": {
		"inputsInline": true,
		"message0": "next costume",
		"nextStatement": null,
		"previousStatement": null,
		"args0": [],
		"style": "Looks"
	},
	"switchBackdropToWait": {
		"message0": "switch backdrop to %1 and wait",
		"args0": [
			{
				"type": "input_value",
				"name": "BACKDROP",
				"check": [
					"String",
					"Number"
				]
			}
		],
		"previousStatement": null,
		"nextStatement": null,
		"style": "Looks",
		"inputsInline": true
	},
	"switchBackdropTo": {
		"message0": "switch backdrop to %1",
		"args0": [
			{
				"type": "input_value",
				"name": "COSTUME",
				"check": [
					"String", 
					"Number"
				]
			}
		],
		"previousStatement": null,
		"nextStatement": null,
		"style": "Looks"
	},
	"nextBackdrop": {
		"message0": "next backdrop",
		"previousStatement": null,
		"nextStatement": null,
		"args0": [],
		"style": "Looks"
	},
	"show": {
		"inputsInline": true,
		"message0": "show",
		"nextStatement": null,
		"previousStatement": null,
		"args0": [],
		"style": "Looks"
	},
	"hide": {
		"inputsInline": true,
		"message0": "hide",
		"nextStatement": null,
		"previousStatement": null,
		"args0": [],
		"style": "Looks"
	},
	"changeSize": {
		"inputsInline": true,
		"message0": "change size by %1 %%",
		"args0": [
			{
				"type": "input_value",
				"name": "SIZE",
				"check": "Number"
			}
		],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Looks"
	},
	"setSize": {
		"inputsInline": true,
		"message0": "set size to %1 %%",
		"args0": [
			{
				"type": "input_value",
				"name": "SIZE",
				"check": "Number"
			}
		],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Looks"
	},
	"goForward": {
		"message0": "go one layer forwards",
		"nextStatement": null,
		"previousStatement": null,
		"style": "Looks",
		"args0": []
	},
	"goBackward": {
		"message0": "go one layer backwards",
		"nextStatement": null,
		"previousStatement": null,
		"style": "Looks",
		"args0": []
	},
	"goToFront": {
		"message0": "go to front",
		"nextStatement": null,
		"previousStatement": null,
		"style": "Looks",
		"args0": []
	},
	"goToBack": {
		"message0": "go to back",
		"nextStatement": null,
		"previousStatement": null,
		"style": "Looks",
		"args0": []
	},
	"visible": {
		"inputsInline": true,
		"message0": "visible",
		"output": "Boolean",
		"style": "Looks"
	},
	"size": {
		"inputsInline": true,
		"message0": "size",
		"output": "Number",
		"style": "Looks"
	},
	"costumeName": {
		"message0": "costume name",
		"output": "String",
		"style": "Looks"
	},
	"backdropName": {
		"message0": "backdrop name",
		"output": "String",
		"style": "Looks"
	},
	"costumeNumber": {
		"inputsInline": true,
		"message0": "costume #",
		"output": "Number",
		"style": "Looks"
	},
	"backdropNumber": {
		"inputsInline": true,
		"message0": "backdrop #",
		"output": "Number",
		"style": "Looks"
	},
	"getEffect": {
		"inputsInline": true,
		"message0": "effect %1",
		"output": "Number",
		"args0": [
			{
				"type": "input_value",
				"name": "EFFECT",
				"check": "String"
			}
		],
		"style": "Looks"
	},
	"clearEffects": {
		"inputsInline": true,
		"message0": "clear effects",
		"previousStatement": null,
		"nextStatement": null,
		"args0": [],
		"style": "Looks"
	},
	// Sounds
	"playSound": {
		"message0": "play sound %1",
		"args0": [
			{
				"type": "input_value",
				"name": "SOUND",
				"check": "String"
			}
		],
		"previousStatement": null,
		"nextStatement": null,
		"style": "Sounds"
	},
	"playSoundUntilDone": {
		"message0": "play sound %1 until done",
		"args0": [
			{
				"type": "input_value",
				"name": "SOUND",
				"check": "String"
			}
		],
		"previousStatement": null,
		"nextStatement": null,
		"style": "Sounds"
	},
	"setVolume": {
		"message0": "set volume to %1 %%",
		"args0": [
			{
				"type": "input_value",
				"name": "VOLUME",
				"check": "Number"
			}
		],
		"previousStatement": null,
		"nextStatement": null,
		"style": "Sounds"
	},
	"changeVolume": {
		"message0": "change volume by %1 %%",
		"args0": [
			{
				"type": "input_value",
				"name": "VOLUME",
				"check": "Number"
			}
		],
		"previousStatement": null,
		"nextStatement": null,
		"style": "Sounds"
	},
	"volume": {
		"message0": "volume",
		"output": "Number",
		"style": "Sounds"
	},
	"stopSounds": {
		"message0": "stop my sounds",
		"previousStatement": null,
		"nextStatement": null,
		"style": "Sounds"
	},
	// Pen
	"rgb": {
		"inputsInline": true,
		"message0": "RGB %1 %2 %3",
		"args0": [
			{
				"type": "input_value",
				"name": "RED",
				"check": "Number"
			},
			{
				"type": "input_value",
				"name": "GREEN",
				"check": "Number"
			},
			{
				"type": "input_value",
				"name": "BLUE",
				"check": "Number"
			}
		],
		"output": "Color",
		"style": "Pen"
	},
	"penClear": {
		"inputsInline": true,
		"message0": "clear",
		"args0": [],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Pen"
	},
	"penDown": {
		"inputsInline": true,
		"message0": "pen down",
		"args0": [],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Pen"
	},
	"penUp": {
		"inputsInline": true,
		"message0": "pen up",
		"args0": [],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Pen"
	},
	"stamp": {
		"inputsInline": true,
		"message0": "stamp",
		"args0": [],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Pen"
	},
	"setPenColor": {
		"inputsInline": true,
		"message0": "set pen color to %1",
		"args0": [
			{
				"type": "input_value",
				"name": "COLOR",
				"check": "Color"
			}
		],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Pen"
	},
	"changePenSize": {
		"inputsInline": true,
		"message0": "change pen size by %1",
		"args0": [
			{
				"type": "input_value",
				"name": "SIZE",
				"check": "Number"
			}
		],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Pen"
	},
	"penSize": {
		"message0": "pen size",
		"output": "Number",
		"style": "Pen"
	},
	"penColor": {
		"message0": "pen color",
		"output": "Color",
		"style": "Pen"
	},
	"isPenDown": {
		"message0": "is pen down?",
		"output": "Boolean",
		"style": "Pen"
	},
	"setPenSize": {
		"inputsInline": true,
		"message0": "set pen size to %1",
		"args0": [
			{
				"type": "input_value",
				"name": "SIZE",
				"check": "Number"
			}
		],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Pen"
	},
	// Events
	"whenLoaded": {
		"inputsInline": true,
		"message0": "when loaded",
		"nextStatement": null,
		"style": "Events"
	},
	"whenFlag": {
		"inputsInline": true,
		"message0": "when flag clicked",
		"nextStatement": null,
		"style": "Events"
	},
	"whenBackdropChangesTo": {
		"inputsInline": true,
		"message0": "when backdrop changes to %1",
		"args0": [
			{
				"type": "input_value",
				"name": "BACKDROP",
				"check": "String"
			}
		],
		"nextStatement": null,
		"style": "Events"
	},
	"whenKeyPressed": {
		"inputsInline": true,
		"message0": "when %1 key pressed",
		"args0": [
			{
				"type": "input_value",
				"name": "KEY",
				"check": "String"
			}
		],
		"nextStatement": null,
		"style": "Events"
	},
	"whenTimerElapsed": {
		"inputsInline": true,
		"message0": "when timer > %1",
		"args0": [
			{
				"type": "input_value",
				"name": "TIMER",
				"check": "Number"
			}
		],
		"nextStatement": null,
		"style": "Events"
	},
	"event": {
		"message0": "%1",
		"args0": [
			{
				"type": "field_dropdown",
				"name": "EVENT",
				"options": [
					[
						"clicked",
						"clicked"
					],
					[
						"double-clicked",
						"double-clicked"
					],
					[
						"pressed",
						"pressed"
					],
					[
						"released",
						"released"
					],
					[
						"left",
						"left"
					],
					[
						"entered",
						"entered"
					],
					[
						"moved",
						"moved"
					]
				]
			}
		],
		"output": "String",
		"style": "Events"
	},
	"whenMouse": {
		"inputsInline": true,
		"message0": "when mouse has %1",
		"args0": [
			{
				"type": "input_value",
				"check": "String",
				"name": "EVENT"
			}
		],
		"nextStatement": null,
		"style": "Events"
	},
	"whenReceiveMessage": {
		"inputsInline": true,
		"message0": "when I receive %1",
		"args0": [
			{
				"type": "input_value",
				"check": "String",
				"name": "MESSAGE"
			}
		],
		"nextStatement": null,
		"style": "Events"
	},
	"broadcastMessage": {
		"inputsInline": true,
		"message0": "broadcast %1",
		"args0": [
			{
				"type": "input_value",
				"check": "String",
				"name": "MESSAGE"
			}
		],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Events"
	},
	"broadcastMessageWait": {
		"inputsInline": true,
		"message0": "broadcast %1 and wait",
		"args0": [
			{
				"type": "input_value",
				"check": "String",
				"name": "MESSAGE"
			}
		],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Events"
	},
	// Control
	"wait": {
		"inputsInline": true,
		"message0": "wait %1 seconds",
		"args0": [
			{
				"type": "input_value",
				"name": "SECS",
				"check": "Number"
			}
		],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Controls"
	},
	"repeat": {
		"inputsInline": true,
		"message0": "repeat %1 times",
		"args0": [
			{
				"type": "input_value",
				"name": "TIMES",
				"check": "Number"
			}
		],
		"message1": "%1",
		"args1": [
			{
				"type": "input_statement",
				"name": "STACK"
			}
		],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Controls"
	},
	"while": {
		"inputsInline": true,
		"message0": "while %1",
		"args0": [
			{
				"type": "input_value",
				"name": "CONDITION",
				"check": "Boolean"
			}
		],
		"message1": "%1",
		"args1": [
			{
				"type": "input_statement",
				"name": "STACK"
			}
		],
		"previousStatement": null,
		"nextStatement": null,
		"style": "Controls"
	},
	"doWhile": {
		"inputsInline": true,
		"message0": "do",
		"message1": "%1 while %2",
		"args1": [
			{
				"type": "input_statement",
				"name": "STACK"
			},
			{
				"type": "input_value",
				"name": "CONDITION",
				"check": "Boolean"
			}
		],
		"previousStatement": null,
		"nextStatement": null,
		"style": "Controls"
	},
	"break": {
		"inputsInline": true,
		"message0": "break",
		"previousStatement": null,
		"style": "Controls"
	},
	"continue": {
		"inputsInline": true,
		"message0": "continue",
		"previousStatement": null,
		"style": "Controls"
	},
	"controls_if": {
		"inputsInline": true,
		"message0": "%{BKY_CONTROLS_IF_MSG_IF} %1",
		"args0": [
			{
				"type": "input_value",
				"name": "IF0",
				"check": "Boolean"
			}
		],
		"message1": "%1",
		"args1": [
			{
				"type": "input_statement",
				"name": "DO0"
			}
		],
		"previousStatement": null,
		"nextStatement": null,
		"helpUrl": "%{BKY_CONTROLS_IF_HELPURL}",
		"suppressPrefixSuffix": true,
		"mutator": "mutator_if",
		"style": "Controls"
	},
	// <Mutator blocks>
	"try": {
		"message0": "try",
		"style": "Controls",
		"nextStatement": [
			"catch",
			"finally"
		]
	},
	"catch": {
		"message0": "catch",
		"style": "Controls",
		"nextStatement": "finally",
		"previousStatement": "catch"
	},
	"catchVar": {
		"message0": "catch %1",
		"args0": [
			{
				"type": "field_input",
				"name": "ERROR",
				"text": "error"
			}
		],
		"style": "Controls",
		"nextStatement": "finally",
		"previousStatement": "catch"
	},
	"finally": {
		"message0": "finally",
		"style": "Controls",
		"previousStatement": "finally"
	},
	// </Mutator blocks>
	"tryCatch": {
		"inputsInline": true,
		"message0": "try",
		"message1": "%1",
		"args1": [
			{
				"type": "input_statement",
				"name": "TRY"
			}
		],
		"previousStatement": null,
		"nextStatement": null,
		"style": "Controls",
		"mutator": "mutator_try"
	},
	"throw": {
		"inputsInline": true,
		"message0": "throw %1",
		"args0": [
			{
				"type": "input_value",
				"name": "ERROR"
			}
		],
		"previousStatement": null,
		"style": "Controls"
	},
	"whenCloned": {
		"inputsInline": true,
		"message0": "when I start as a clone",
		"nextStatement": null,
		"style": "Controls"
	},
	"clone": {
		"inputsInline": true,
		"message0": "clone %1",
		"args0": [
			{
				"type": "input_value",
				"name": "SPRITE",
				"check": "Sprite"
			}
		],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Controls"
	},
	// Unlike Scratch,
	// this block can delete 
	// both clones and the original sprite,
	// depending where it is placed.
	"delete": {
		"inputsInline": true,
		"message0": "delete",
		"args0": [],
		"previousStatement": null,
		"style": "Controls"
	},
	// This block was hard to implement.
	// Basically, it throws an error
	// which cannot be caught by the program.
	// This causes the program to stop running.
	// However, "stop my scripts"
	// will never be implemented.
	"stop": {
		"message0": "stop all scripts",
		"previousStatement": null,
		"style": "Controls"
	},
	"isTouching": {
		"inputsInline": true,
		"message0": "touching %1?",
		"args0": [
			{
				"type": "input_value",
				"name": "SPRITE",
				"check": "Sprite"
			}
		],
		"output": "Boolean",
		"style": "Sensing"
	},
	"isTouchingBackdropColor": {
		"inputsInline": true,
		"message0": "touching backdrop color %1?",
		"args0": [
			{
				"type": "input_value",
				"name": "COLOR",
				"check": "Color"
			}
		],
		"output": "Boolean",
		"style": "Sensing"
	},
	"isTouchingEdge": {
		"inputsInline": true,
		"message0": "touching edge?",
		"args0": [],
		"output": "Boolean",
		"style": "Sensing"
	},
	"isTouchingMouse": {
		"inputsInline": true,
		"message0": "touching mouse-pointer?",
		"args0": [],
		"output": "Boolean",
		"style": "Sensing"
	},
	"distanceTo": {
		"inputsInline": true,
		"message0": "distance to x: %1 y: %2",
		"args0": [
			{
				"type": "input_value",
				"name": "X",
				"check": "Number"
			},
			{
				"type": "input_value",
				"name": "Y",
				"check": "Number"
			}
		],
		"output": "Number",
		"style": "Sensing"
	},
	// Unlike Scratch (but just like Snap!),
	// this block returns the answer.
	// Scrap sprires does not have an "answer"
	// property. SB3 compatibility layer
	// can handle this.
	"ask": {
		"inputsInline": true,
		"message0": "ask %1 and wait",
		"args0": [
			{
				"type": "input_value",
				"name": "QUESTION"
			}
		],
		"output": "String",
		"style": "Sensing"
	},
	"isKeyPressed": {
		"inputsInline": true,
		"message0": "key %1 pressed?",
		"args0": [
			{
				"type": "input_value",
				"name": "KEY",
				"check": "String"
			}
		],
		"output": "Boolean",
		"style": "Sensing"
	},
	"mouseDown": {
		"inputsInline": true,
		"message0": "mouse down?",
		"output": "Boolean",
		"style": "Sensing"
	},
	"mouseX": {
		"inputsInline": true,
		"message0": "mouse x",
		"output": "Number",
		"style": "Sensing"
	},
	"mouseY": {
		"inputsInline": true,
		"message0": "mouse y",
		"output": "Number",
		"style": "Sensing"
	},
	"property": {
		"inputsInline": true,
		"message0": "%1 of %2",
		"args0": [
			{
				"type": "field_dropdown",
				"name": "PROPERTY",
				"options": [
					[
						"x",
						"x"
					],
					[
						"y",
						"y"
					],
					[
						"size",
						"size"
					],
					[
						"direction",
						"direction"
					],
					[
						"volume",
						"volume"
					],
					[
						"pen size",
						"penSize"
					],
					[
						"color effect",
						"effects.color"
					],
					[
						"ghost effect",
						"effects.ghost"
					],
					[
						"grayscale effect",
						"effects.grayscale"
					],
					[
						"brightness effect",
						"effects.brightness"
					]
				]
			},
			{
				"type": "input_value",
				"name": "SPRITE",
				"check": "Sprite"
			}
		],
		"output": "Number",
		"style": "Sensing"
	},
	"setDraggable": {
		"inputsInline": true,
		"message0": "set draggable to %1",
		"args0": [
			{
				"type": "input_value",
				"name": "DRAGGABLE",
				"check": "Boolean"
			}
		],
		"nextStatement": null,
		"previousStatement": null,
		"style": "Sensing"
	},
	"getTimer": {
		"inputsInline": true,
		"message0": "timer",
		"output": "Number",
		"style": "Sensing",
		"args0": []
	},
	"resetTimer": {
		"inputsInline": true,
		"message0": "reset timer",
		"nextStatement": null,
		"previousStatement": null,
		"style": "Sensing",
		"args0": []
	},
	"date": {
		"message0": "%1",
		"args0": [
			{
				"type": "field_date",
				"name": "DATE"
			}
		],
		"output": "Date",
		"style": "Sensing"
	},
	"today": {
		"message0": "today",
		"output": "Date",
		"style": "Sensing"
	},
	"dateProperty": {
		"inputsInline": true,
		"message0": "%1 of %2",
		"args0": [
			{
				"type": "field_dropdown",
				"name": "PROPERTY",
				"options": [
					[
						"year",
						"getFullYear"
					],
					[
						"month",
						"getMonth"
					],
					[
						"date",
						"getDate"
					],
					[
						"day of week",
						"getDay"
					],
					[
						"hour",
						"getHours"
					],
					[
						"minute",
						"getMinutes"
					],
					[
						"second",
						"getSeconds"
					]
				]
			},
			{
				"type": "input_value",
				"name": "DATE",
				"check": "Date"
			}
		],
		"output": "Number",
		"style": "Sensing"
	},
	"isTurbo": {
		"message0": "is turbo mode?",
		"output": "Boolean",
		"style": "Sensing"
	},
	// Operators
	"arithmetics": {
		"inputsInline": true,
		"message0": "%1 %2 %3",
		"args0": [
			{
				"type": "input_value",
				"name": "A",
				"check": [
					"Number",
					"String"
				]
			},
			{
				"type": "field_dropdown",
				"name": "OP",
				"options": [
					[
						"+",
						"+"
					],
					[
						"-",
						"-"
					],
					[
						"×",
						"*"
					],
					[
						"÷",
						"/"
					],
					[
						"^",
						"**"
					],
					[
						"mod",
						"%"
					]
				]
			},
			{
				"type": "input_value",
				"name": "B",
				"check": [
					"Number",
					"String"
				]
			}
		],
		"output": "Number",
		"style": "Operators"
	},
	"compare": {
		"inputsInline": true,
		"message0": "%1 %2 %3",
		"args0": [
			{
				"type": "input_value",
				"name": "A",
				"check": [
					"Number",
					"String"
				]
			},
			{
				"type": "field_dropdown",
				"name": "OP",
				"options": [
					[
						"=",
						"=="
					],
					[
						"≠",
						"!="
					],
					[
						"<",
						"<"
					],
					[
						"≤",
						"<="
					],
					[
						">",
						">"
					],
					[
						"≥",
						">="
					]
				]
			},
			{
				"type": "input_value",
				"name": "B",
				"check": [
					"Number",
					"String"
				]
			}
		],
		"output": "Boolean",
		"style": "Operators"
	},
	"operation": {
		"inputsInline": true,
		"message0": "%1 %2 %3",
		"args0": [
			{
				"type": "input_value",
				"name": "A",
				"check": "Boolean"
			},
			{
				"type": "field_dropdown",
				"name": "OP",
				"options": [
					[
						"and",
						"&&"
					],
					[
						"or",
						"||"
					]
				]
			},
			{
				"type": "input_value",
				"name": "B",
				"check": "Boolean"
			}
		],
		"output": "Boolean",
		"style": "Operators"
	},
	"not": {
		"inputsInline": true,
		"message0": "not %1",
		"args0": [
			{
				"type": "input_value",
				"name": "BOOL",
				"check": "Boolean"
			}
		],
		"output": "Boolean",
		"style": "Operators"
	},
	"boolean": {
		"inputsInline": true,
		"message0": "%1",
		"args0": [
			{
				"type": "field_dropdown",
				"name": "BOOL",
				"options": [
					[
						"true",
						"true"
					],
					[
						"false",
						"false"
					]
				]
			}
		],
		"output": "Boolean",
		"style": "Operators"
	},
	"random": {
		"message0": "random",
		"output": "Number",
		"style": "Operators"
	},
	"math": {
		"inputsInline": true,
		"message0": "%1 of %2",
		"args0": [
			{
				"type": "field_dropdown",
				"name": "OP",
				"options": [
					[
						"abs",
						"abs"
					],
					[
						"round",
						"round"
					],
					[
						"floor",
						"floor"
					],
					[
						"ceiling",
						"ceil"
					],
					[
						"sqrt",
						"sqrt"
					],
					[
						"sin",
						"sin"
					],
					[
						"cos",
						"cos"
					],
					[
						"tan",
						"tan"
					],
					[
						"asin",
						"asin"
					],
					[
						"acos",
						"acos"
					],
					[
						"atan",
						"atan"
					],
					[
						"ln",
						"log"
					],
					[
						"log",
						"log10"
					],
					[
						"e ^",
						"exp"
					]
				]
			},
			{
				"type": "input_value",
				"name": "NUM",
				"check": "Number"
			}
		],
		"output": "Number",
		"style": "Operators"
	},
	"constant": {
		"inputsInline": true,
		"message0": "%1",
		"args0": [
			{
				"type": "field_dropdown",
				"name": "CONSTANT",
				"options": [
					[
						"π",
						"Math.PI"
					],
					[
						"e",
						"Math.E"
					],
					[
						"∞",
						"Infinity"
					],
					[
						"NaN",
						"NaN"
					]
				]
			}
		],
		"output": "Number",
		"style": "Operators"
	},
	"string": {
		"inputsInline": true,
		"message0": "convert %1 to string",
		"args0": [
			{
				"type": "input_value",
				"name": "VALUE"
			}
		],
		"output": "String",
		"style": "Operators"
	},
	"number": {
		"inputsInline": true,
		"message0": "convert %1 to number",
		"args0": [
			{
				"type": "input_value",
				"name": "VALUE"
			}
		],
		"output": "Number",
		"style": "Operators"
	},
	// Iterables
	"iterables_string": {
		"inputsInline": true,
		"message0": "%1",
		"args0": [
			{
				"type": "field_string",
				"name": "TEXT",
				"text": ""
			}
		],
		"output": "String",
		"style": "Iterables"
	},
	"array": {
		"inputsInline": false,
		"message0": "",
		"mutator": "mutator_array",
		"output": "Array",
		"extraState": {
			"items": [
				"single",
				"single",
				"single"
			]
		},
		"style": "Iterables"
	},
	"length": {
		"inputsInline": true,
		"message0": "length of %1",
		"args0": [
			{
				"name": "ITERABLE",
				"type": "input_value",
				"check": [
					"String",
					"Array"
				]
			}
		],
		"output": "Number",
		"style": "Iterables"
	},
	"reverse": {
		"inputsInline": true,
		"message0": "reverse array %1",
		"args0": [
			{
				"name": "ITERABLE",
				"type": "input_value",
				"check": [
					"Array"
				]
			}
		],
		"output": [
			"Array"
		],
		"style": "Iterables"
	},
	"join": {
		"inputsInline": true,
		"message0": "join %1 with %2",
		"args0": [
			{
				"name": "ITERABLE",
				"type": "input_value",
				"check": [
					"Array"
				]
			},
			{
				"name": "SEPARATOR",
				"type": "input_value",
				"check": [
					"String"
				]
			}
		],
		"output": [
			"String"
		],
		"style": "Iterables"
	},
	"includes": {
		"inputsInline": true,
		"message0": "%1 includes %2",
		"args0": [
			{
				"type": "input_value",
				"name": "ITERABLE",
				"check": [
					"String",
					"Array"
				]
			},
			{
				"type": "input_value",
				"name": "ITEM"
			}
		],
		"output": "Boolean",
		"style": "Iterables"
	},
	"slice": {
		"inputsInline": true,
		"message0": "slice %1 from %2 to %3",
		"args0": [
			{
				"type": "input_value",
				"name": "ITERABLE",
				"check": [
					"String",
					"Array"
				]
			},
			{
				"type": "input_value",
				"name": "START",
				"check": "Number"
			},
			{
				"type": "input_value",
				"name": "TO",
				"check": "Number"
			}
		],
		"output": [
			"Array",
			"String"
		],
		"style": "Iterables"
	},
	"item": {
		"inputsInline": true,
		"message0": "item %1 of %2",
		"args0": [
			{
				"type": "input_value",
				"name": "INDEX",
				"check": "Number"
			},
			{
				"type": "input_value",
				"name": "ITERABLE",
				"check": [
					"String",
					"Array"
				]
			}
		],
		"output": null,
		"style": "Iterables"
	},
	"indexOf": {
		"inputsInline": true,
		"message0": "in %1 find index of %2",
		"args0": [
			{
				"type": "input_value",
				"name": "ITERABLE",
				"check": [
					"String",
					"Array"
				]
			},
			{
				"type": "input_value",
				"name": "ITEM"
			}
		],
		"output": null,
		"style": "Iterables"
	},
	"foreach": {
		"inputsInline": true,
		"message0": "for each %1 in %2",
		"args0": [
			{
				"type": "field_param",
				"name": "VAR",
				"var": "item"
			},
			{
				"type": "input_value",
				"name": "ITERABLE",
				"check": [
					"String",
					"Array"
				]
			}
		],
		"message1": "%1",
		"args1": [
			{
				"type": "input_statement",
				"name": "DO"
			}
		],
		"previousStatement": null,
		"nextStatement": null,
		"style": "Iterables",
		"extensions": [
			"foreach_contextmenu"
		]
	}
}